#!/usr/bin/env ruby
require "pp"
require "pathname"
require "yaml"

require "thor"
require "tumblr_client"

require_relative "../lib/video"

# debug
require "tapp"

class TumblerCLI < Thor
  desc "list [PATTERN]", "list video ids"
  def list(pattern = ".")
    puts Video.ids.grep(/#{pattern}/).join("\n")
  end

  desc "show ID", "show description of video with id"
  def show(id)
    p Video.new(id)
  end

  desc "post ID", "create or update tumblr about video with id"
  def post(id)
    video = Video.new(id)

    video.parts.each {|part| create_or_update_post(:video, part) }
    create_or_update_post(:photo, video.image)

    video.update_info!
    puts "all posted view it at http://#{my_tumblr_host}/search/#{video.id}"
  end

  protected
  def my_tumblr_host
    "av-part.tumblr.com"
  end

  def tumblr
    unless @tumblr
      configuration = YAML.load_file(File.expand_path("~/.tumblr"))
      Tumblr.configure do |config|
        Tumblr::Config::VALID_OPTIONS_KEYS.each do |key|
          config.send(:"#{key}=", configuration[key.to_s])
        end
      end
      @tumblr = Tumblr::Client.new
    end
    @tumblr
  end

  def create_or_update_post(type, item)
    if item.id
      response = tumblr.edit(my_tumblr_host, item.tumblr_param.merge(id: item.id))

      puts "updated http://#{my_tumblr_host}/post/#{item.id}"
    else
      response = tumblr.send(type, my_tumblr_host, item.tumblr_param)

      item.id = response["id"]
      puts "saved at http://#{my_tumblr_host}/post/#{item.id}"
    end
  end
end

TumblerCLI.start
